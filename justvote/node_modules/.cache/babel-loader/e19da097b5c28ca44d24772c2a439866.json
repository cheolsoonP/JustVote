{"ast":null,"code":"/* LOGIN */\nimport * as types from \"./types\";\nconst initialState = {\n  login: {\n    status: \"INIT\"\n  },\n  register: {\n    status: \"INIT\",\n    error: -1\n  },\n  status: {\n    valid: false,\n    isLoggedIn: false,\n    currentUser: \"\"\n  }\n};\nexport default function authentication(state = initialState, action) {\n  switch (action.type) {\n    case types.AUTH_LOGIN:\n      console.log(\"login_wait\");\n      return { ...state,\n        login: {\n          status: \"WAITING\"\n        }\n      };\n\n    case types.AUTH_LOGIN_SUCCESS:\n      console.log(\"login_success\");\n      return { ...state,\n        login: {\n          status: \"SUCCESS\"\n        },\n        status: { ...state.status,\n          isLoggedIn: true,\n          currentUser: action.userId\n        }\n      };\n\n    case types.AUTH_LOGIN_FAILURE:\n      console.log(\"login_failure\");\n      return { ...state,\n        login: {\n          status: \"FAILURE\"\n        }\n      };\n\n    default:\n      return state;\n\n    /* CHECK SESSIONS */\n\n    case types.AUTH_GET_STATUS:\n      return { ...state,\n        status: { ...state.staus,\n          isLoggedIn: true\n        }\n      };\n\n    case types.AUTH_GET_STATUS_SUCCESS:\n      return { ...state,\n        status: { ...state.status,\n          valid: true,\n          currentUser: action.username\n        }\n      };\n\n    case types.AUTH_GET_STATUS_FAILURE:\n      return { ...state,\n        status: { ...state.status,\n          valid: false,\n          isLoggedIn: false\n        }\n      };\n\n    /* LOGOUT */\n\n    case types.AUTH_LOGOUT:\n      return { ...state,\n        status: { ...state.status,\n          isLoggedIn: false,\n          currentUser: \"\"\n        }\n      };\n  }\n}","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/redux/authentication/reducer.js"],"names":["types","initialState","login","status","register","error","valid","isLoggedIn","currentUser","authentication","state","action","type","AUTH_LOGIN","console","log","AUTH_LOGIN_SUCCESS","userId","AUTH_LOGIN_FAILURE","AUTH_GET_STATUS","staus","AUTH_GET_STATUS_SUCCESS","username","AUTH_GET_STATUS_FAILURE","AUTH_LOGOUT"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH,GADY;AAInBC,EAAAA,QAAQ,EAAE;AACRD,IAAAA,MAAM,EAAE,MADA;AAERE,IAAAA,KAAK,EAAE,CAAC;AAFA,GAJS;AAQnBF,EAAAA,MAAM,EAAE;AACNG,IAAAA,KAAK,EAAE,KADD;AAENC,IAAAA,UAAU,EAAE,KAFN;AAGNC,IAAAA,WAAW,EAAE;AAHP;AARW,CAArB;AAeA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGT,YAAhC,EAA8CU,MAA9C,EAAsD;AACnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,KAAK,CAACa,UAAX;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,aAAO,EACL,GAAGL,KADE;AAELR,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AADH;AAFF,OAAP;;AAMF,SAAKH,KAAK,CAACgB,kBAAX;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO,EACL,GAAGL,KADE;AAELR,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AADH,SAFF;AAKLA,QAAAA,MAAM,EAAE,EACN,GAAGO,KAAK,CAACP,MADH;AAENI,UAAAA,UAAU,EAAE,IAFN;AAGNC,UAAAA,WAAW,EAAEG,MAAM,CAACM;AAHd;AALH,OAAP;;AAWF,SAAKjB,KAAK,CAACkB,kBAAX;AACEJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO,EACL,GAAGL,KADE;AAELR,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AADH;AAFF,OAAP;;AAMF;AACE,aAAOO,KAAP;;AACF;;AACA,SAAKV,KAAK,CAACmB,eAAX;AACE,aAAO,EACL,GAAGT,KADE;AAELP,QAAAA,MAAM,EAAE,EACN,GAAGO,KAAK,CAACU,KADH;AAENb,UAAAA,UAAU,EAAE;AAFN;AAFH,OAAP;;AAOF,SAAKP,KAAK,CAACqB,uBAAX;AACE,aAAO,EACL,GAAGX,KADE;AAELP,QAAAA,MAAM,EAAE,EACN,GAAGO,KAAK,CAACP,MADH;AAENG,UAAAA,KAAK,EAAE,IAFD;AAGNE,UAAAA,WAAW,EAAEG,MAAM,CAACW;AAHd;AAFH,OAAP;;AAQF,SAAKtB,KAAK,CAACuB,uBAAX;AACE,aAAO,EACL,GAAGb,KADE;AAELP,QAAAA,MAAM,EAAE,EACN,GAAGO,KAAK,CAACP,MADH;AAENG,UAAAA,KAAK,EAAE,KAFD;AAGNC,UAAAA,UAAU,EAAE;AAHN;AAFH,OAAP;;AAQF;;AACA,SAAKP,KAAK,CAACwB,WAAX;AACE,aAAO,EACL,GAAGd,KADE;AAELP,QAAAA,MAAM,EAAE,EACN,GAAGO,KAAK,CAACP,MADH;AAENI,UAAAA,UAAU,EAAE,KAFN;AAGNC,UAAAA,WAAW,EAAE;AAHP;AAFH,OAAP;AA7DJ;AAsED","sourcesContent":["/* LOGIN */\r\nimport * as types from \"./types\";\r\n\r\nconst initialState = {\r\n  login: {\r\n    status: \"INIT\",\r\n  },\r\n  register: {\r\n    status: \"INIT\",\r\n    error: -1,\r\n  },\r\n  status: {\r\n    valid: false,\r\n    isLoggedIn: false,\r\n    currentUser: \"\",\r\n  },\r\n};\r\n\r\nexport default function authentication(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.AUTH_LOGIN:\r\n      console.log(\"login_wait\");\r\n      return {\r\n        ...state,\r\n        login: {\r\n          status: \"WAITING\",\r\n        },\r\n      };\r\n    case types.AUTH_LOGIN_SUCCESS:\r\n      console.log(\"login_success\");\r\n      return {\r\n        ...state,\r\n        login: {\r\n          status: \"SUCCESS\",\r\n        },\r\n        status: {\r\n          ...state.status,\r\n          isLoggedIn: true,\r\n          currentUser: action.userId,\r\n        },\r\n      };\r\n    case types.AUTH_LOGIN_FAILURE:\r\n      console.log(\"login_failure\");\r\n      return {\r\n        ...state,\r\n        login: {\r\n          status: \"FAILURE\",\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n    /* CHECK SESSIONS */\r\n    case types.AUTH_GET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: {\r\n          ...state.staus,\r\n          isLoggedIn: true,\r\n        },\r\n      };\r\n    case types.AUTH_GET_STATUS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        status: {\r\n          ...state.status,\r\n          valid: true,\r\n          currentUser: action.username,\r\n        },\r\n      };\r\n    case types.AUTH_GET_STATUS_FAILURE:\r\n      return {\r\n        ...state,\r\n        status: {\r\n          ...state.status,\r\n          valid: false,\r\n          isLoggedIn: false,\r\n        },\r\n      };\r\n    /* LOGOUT */\r\n    case types.AUTH_LOGOUT:\r\n      return {\r\n        ...state,\r\n        status: {\r\n          ...state.status,\r\n          isLoggedIn: false,\r\n          currentUser: \"\",\r\n        },\r\n      };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}