{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Front\\\\justvote\\\\src\\\\components\\\\header\\\\Header.js\";\n// Header는 Topbar를\nimport React, { Component } from \"react\";\nimport TopBar from \"../TopBar\";\nimport { connect } from \"react-redux\";\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\nimport Subbar from \"../Subbar\";\nimport FullWidthGrid from \"../FullWidthGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  componentDidMount() {\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\n    // get cookie by name\n    console.log(\"header-cookie : \" + document.cookie);\n\n    function getCookie(name) {\n      var value = \"; \" + document.cookie;\n      var parts = value.split(\"; \" + name + \"=\");\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\n    } // get loginData from cookie\n\n\n    let loginData = getCookie(\"key\"); // if loginData is undefined, do nothing\n\n    if (typeof loginData === \"undefined\") return; // decode base64 & parse json\n\n    loginData = JSON.parse(atob(loginData)); // if not logged in, do nothing\n\n    if (!loginData.isLoggedIn) return; // page refreshed & has a session in cookie,\n    // check whether this cookie is valid or not\n\n    this.props.getStatusRequest().then(() => {\n      // if session is not valid\n      if (!this.props.status.valid) {\n        // logout the session\n        loginData = {\n          isLoggedIn: false,\n          userId: \"\"\n        };\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData)); // and notify\n        //let $toastContent = $();\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\n        //Materialize.toast($toastContent, 4000);\n      }\n    });\n  }\n\n  render() {\n    /* Check whether current route is login or register using regex */\n    let re = /(signIn|signUp)/;\n    let isAuth = re.test(this.props.location.pathname);\n    console.log(this.props.location.pathname); //    let isAuth = re.test(this.props.props.location.pathname);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isAuth ? /*#__PURE__*/_jsxDEV(TopBar, {\n          isLoggedIn: this.props.status.isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TopBar, {\n          isLoggedIn: this.props.status.isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"state.authentication.status.isLoggedIn\" + state.authentication.status.isLoggedIn);\n  return {\n    status: state.authentication.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      return dispatch(getStatusRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/components/header/Header.js"],"names":["React","Component","TopBar","connect","getStatusRequest","Subbar","FullWidthGrid","Header","componentDidMount","console","log","document","cookie","getCookie","name","value","parts","split","length","pop","shift","loginData","JSON","parse","atob","isLoggedIn","props","then","status","valid","userId","btoa","stringify","render","re","isAuth","test","location","pathname","mapStateToProps","state","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// Header는 Topbar를\r\nimport React, { Component } from \"react\";\r\nimport TopBar from \"../TopBar\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\r\nimport Subbar from \"../Subbar\";\r\nimport FullWidthGrid from \"../FullWidthGrid\";\r\n\r\nclass Header extends Component {\r\n  componentDidMount() {\r\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\r\n    // get cookie by name\r\n    console.log(\"header-cookie : \" + document.cookie);\r\n    function getCookie(name) {\r\n      var value = \"; \" + document.cookie;\r\n      var parts = value.split(\"; \" + name + \"=\");\r\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n    }\r\n\r\n    // get loginData from cookie\r\n    let loginData = getCookie(\"key\");\r\n\r\n    // if loginData is undefined, do nothing\r\n    if (typeof loginData === \"undefined\") return;\r\n\r\n    // decode base64 & parse json\r\n    loginData = JSON.parse(atob(loginData));\r\n\r\n    // if not logged in, do nothing\r\n    if (!loginData.isLoggedIn) return;\r\n\r\n    // page refreshed & has a session in cookie,\r\n    // check whether this cookie is valid or not\r\n    this.props.getStatusRequest().then(() => {\r\n      // if session is not valid\r\n      if (!this.props.status.valid) {\r\n        // logout the session\r\n        loginData = {\r\n          isLoggedIn: false,\r\n          userId: \"\",\r\n        };\r\n\r\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\r\n\r\n        // and notify\r\n        //let $toastContent = $();\r\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\r\n        //Materialize.toast($toastContent, 4000);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /* Check whether current route is login or register using regex */\r\n    let re = /(signIn|signUp)/;\r\n    let isAuth = re.test(this.props.location.pathname);\r\n    console.log(this.props.location.pathname);\r\n    //    let isAuth = re.test(this.props.props.location.pathname);\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          {isAuth ? (\r\n            <TopBar isLoggedIn={this.props.status.isLoggedIn} />\r\n          ) : (\r\n            <TopBar isLoggedIn={this.props.status.isLoggedIn} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(\r\n    \"state.authentication.status.isLoggedIn\" +\r\n      state.authentication.status.isLoggedIn\r\n  );\r\n  return {\r\n    status: state.authentication.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getStatusRequest: () => {\r\n      return dispatch(getStatusRequest());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}