{"ast":null,"code":"import axios from \"axios\";\nimport { VOTE_POST, VOTE_POST_SUCCESS, VOTE_POST_FAILURE // SET_VOTES,\n// SET_CURRENT_VOTES,\n} from \"./types\"; // import API from '../../services/api';\n// import { addError, removeError } from '../error/actions';\n\nexport function votePostRequest(voteTitle, voteContents) {\n  return dispatch => {\n    dispatch(votePost());\n    let body = {\n      voteTilte: voteTitle,\n      voteContents: voteContents\n    };\n    return axios.post(\"http://localhost:8080/makeVote\", body).then(response => {\n      dispatch(votePostSuccess());\n    }).catch(error => {\n      dispatch(votePostFailure(error.response.data.code));\n    });\n  };\n}\nexport function votePost() {\n  return {\n    type: VOTE_POST\n  };\n}\nexport function votePostSuccess() {\n  return {\n    type: VOTE_POST_SUCCESS\n  };\n}\nexport function votePostFailure(error) {\n  return {\n    type: VOTE_POST_FAILURE,\n    error\n  };\n} // export function setVotes(votes) {\n//     return {\n//         type: SET_VOTES,\n//         votes\n//     };\n// }\n// export function setCurrentVotes(vote) {\n//     return {\n//         type: SET_CURRENT_VOTES,\n//         vote,\n//     };\n// }\n// export function getVotes(){\n//     return async dispatch => {\n//        try{\n//            const votes = await API.call('get','votes');\n//            dispatch(setVotes(votes));\n//            dispatch(removeError());\n//        }catch (err) {\n//            const error = err.response.data;\n//            dispatch(addError(error.message));\n//        }\n//     }\n// }\n// export function getUserVotes() {\n//     return async dispatch => {\n//         try{\n//             const votes = await API.call('get','votes/user');\n//             dispatch(setVotes(votes));\n//             dispatch(removeError());\n//         }catch(err) {\n//             const error = err.reponse.data;\n//             dispatch(addError(error.message))\n//         }\n//     }\n// }\n// export function CreateVotes(data) {\n//     return async dispatch => {\n//         try{\n//             const vote = await API.call('post','votes', data);\n//             dispatch(setCurrentVotes(vote));\n//             dispatch(removeError());\n//         }catch(err) {\n//             const error = err.reponse.data;\n//             dispatch(addError(error.message))\n//         }\n//     }\n// }\n// export function getCurrentPolls(path) {\n//     return async dispatch => {\n//         try{\n//             const vote = await API.call('get',`votes/${path}`);\n//             dispatch(setVotes(vote));\n//             dispatch(removeError());\n//         }catch(err) {\n//             const error = err.reponse.data;\n//             dispatch(addError(error.message))\n//         }\n//     }\n// }\n// export function vote(path, data) {\n//     return async dispatch => {\n//         try{\n//             const vote = await API.call('post',`votes/${path}`, data);\n//             dispatch(setVotes(vote));\n//         }catch(err) {\n//             const error = err.reponse.data;\n//             dispatch(addError(error.message))\n//         }\n//     }\n// }","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/redux/makevote/actions.js"],"names":["axios","VOTE_POST","VOTE_POST_SUCCESS","VOTE_POST_FAILURE","votePostRequest","voteTitle","voteContents","dispatch","votePost","body","voteTilte","post","then","response","votePostSuccess","catch","error","votePostFailure","data","code","type"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,SADF,EAEEC,iBAFF,EAGEC,iBAHF,CAIE;AACA;AALF,OAMO,SANP,C,CAQA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AACvD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR;AAEA,QAAIC,IAAI,GAAG;AACTC,MAAAA,SAAS,EAAEL,SADF;AAETC,MAAAA,YAAY,EAAEA;AAFL,KAAX;AAKA,WAAON,KAAK,CACTW,IADI,CACC,gCADD,EACmCF,IADnC,EAEJG,IAFI,CAEEC,QAAD,IAAc;AAClBN,MAAAA,QAAQ,CAACO,eAAe,EAAhB,CAAR;AACD,KAJI,EAKJC,KALI,CAKGC,KAAD,IAAW;AAChBT,MAAAA,QAAQ,CAACU,eAAe,CAACD,KAAK,CAACH,QAAN,CAAeK,IAAf,CAAoBC,IAArB,CAAhB,CAAR;AACD,KAPI,CAAP;AAQD,GAhBD;AAiBD;AAED,OAAO,SAASX,QAAT,GAAoB;AACzB,SAAO;AACLY,IAAAA,IAAI,EAAEnB;AADD,GAAP;AAGD;AAED,OAAO,SAASa,eAAT,GAA2B;AAChC,SAAO;AACLM,IAAAA,IAAI,EAAElB;AADD,GAAP;AAGD;AAED,OAAO,SAASe,eAAT,CAAyBD,KAAzB,EAAgC;AACrC,SAAO;AACLI,IAAAA,IAAI,EAAEjB,iBADD;AAELa,IAAAA;AAFK,GAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  VOTE_POST,\r\n  VOTE_POST_SUCCESS,\r\n  VOTE_POST_FAILURE,\r\n  // SET_VOTES,\r\n  // SET_CURRENT_VOTES,\r\n} from \"./types\";\r\n\r\n// import API from '../../services/api';\r\n// import { addError, removeError } from '../error/actions';\r\n\r\nexport function votePostRequest(voteTitle, voteContents) {\r\n  return (dispatch) => {\r\n    dispatch(votePost());\r\n\r\n    let body = {\r\n      voteTilte: voteTitle,\r\n      voteContents: voteContents,\r\n    };\r\n\r\n    return axios\r\n      .post(\"http://localhost:8080/makeVote\", body)\r\n      .then((response) => {\r\n        dispatch(votePostSuccess());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(votePostFailure(error.response.data.code));\r\n      });\r\n  };\r\n}\r\n\r\nexport function votePost() {\r\n  return {\r\n    type: VOTE_POST,\r\n  };\r\n}\r\n\r\nexport function votePostSuccess() {\r\n  return {\r\n    type: VOTE_POST_SUCCESS,\r\n  };\r\n}\r\n\r\nexport function votePostFailure(error) {\r\n  return {\r\n    type: VOTE_POST_FAILURE,\r\n    error,\r\n  };\r\n}\r\n\r\n// export function setVotes(votes) {\r\n//     return {\r\n//         type: SET_VOTES,\r\n//         votes\r\n//     };\r\n// }\r\n\r\n// export function setCurrentVotes(vote) {\r\n//     return {\r\n//         type: SET_CURRENT_VOTES,\r\n//         vote,\r\n//     };\r\n// }\r\n\r\n// export function getVotes(){\r\n//     return async dispatch => {\r\n//        try{\r\n//            const votes = await API.call('get','votes');\r\n//            dispatch(setVotes(votes));\r\n//            dispatch(removeError());\r\n//        }catch (err) {\r\n//            const error = err.response.data;\r\n//            dispatch(addError(error.message));\r\n//        }\r\n//     }\r\n// }\r\n\r\n// export function getUserVotes() {\r\n//     return async dispatch => {\r\n//         try{\r\n//             const votes = await API.call('get','votes/user');\r\n//             dispatch(setVotes(votes));\r\n//             dispatch(removeError());\r\n//         }catch(err) {\r\n//             const error = err.reponse.data;\r\n//             dispatch(addError(error.message))\r\n//         }\r\n//     }\r\n// }\r\n// export function CreateVotes(data) {\r\n//     return async dispatch => {\r\n//         try{\r\n//             const vote = await API.call('post','votes', data);\r\n//             dispatch(setCurrentVotes(vote));\r\n//             dispatch(removeError());\r\n//         }catch(err) {\r\n//             const error = err.reponse.data;\r\n//             dispatch(addError(error.message))\r\n//         }\r\n//     }\r\n// }\r\n// export function getCurrentPolls(path) {\r\n//     return async dispatch => {\r\n//         try{\r\n//             const vote = await API.call('get',`votes/${path}`);\r\n//             dispatch(setVotes(vote));\r\n//             dispatch(removeError());\r\n//         }catch(err) {\r\n//             const error = err.reponse.data;\r\n//             dispatch(addError(error.message))\r\n//         }\r\n//     }\r\n// }\r\n// export function vote(path, data) {\r\n//     return async dispatch => {\r\n//         try{\r\n//             const vote = await API.call('post',`votes/${path}`, data);\r\n//             dispatch(setVotes(vote));\r\n//         }catch(err) {\r\n//             const error = err.reponse.data;\r\n//             dispatch(addError(error.message))\r\n//         }\r\n//     }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}