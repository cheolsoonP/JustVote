{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Front\\\\justvote\\\\src\\\\components\\\\header\\\\Header.js\";\nimport React, { Component } from \"react\";\nimport TopBar from \"../TopBar\";\nimport { connect } from \"react-redux\";\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  componentDidMount() {\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\n    // get cookie by name\n    function getCookie(name) {\n      var value = \"; \" + document.cookie;\n      var parts = value.split(\"; \" + name + \"=\");\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\n    } // get loginData from cookie\n\n\n    let loginData = getCookie(\"key\"); // if loginData is undefined, do nothing\n\n    if (typeof loginData === \"undefined\") return; // decode base64 & parse json\n\n    loginData = JSON.parse(atob(loginData)); // if not logged in, do nothing\n\n    if (!loginData.isLoggedIn) return; // page refreshed & has a session in cookie,\n    // check whether this cookie is valid or not\n\n    this.props.getStatusRequest().then(() => {\n      // if session is not valid\n      if (!this.props.status.valid) {\n        // logout the session\n        loginData = {\n          isLoggedIn: false,\n          username: \"\"\n        };\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData)); // and notify\n\n        let $toastContent = $(); //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\n        //Materialize.toast($toastContent, 4000);\n      }\n    });\n  }\n\n  render() {\n    /* Check whether current route is login or register using regex */\n    let re = /(SignIn|SignUp)/;\n    let isAuth = re.test(this.props.location.pathname);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isAuth ? undefined : /*#__PURE__*/_jsxDEV(Header, {\n        isLoggedIn: this.props.status.isLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.authentication.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      return dispatch(getStatusRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/components/header/Header.js"],"names":["React","Component","TopBar","connect","getStatusRequest","Header","componentDidMount","getCookie","name","value","document","cookie","parts","split","length","pop","shift","loginData","JSON","parse","atob","isLoggedIn","props","then","status","valid","username","btoa","stringify","$toastContent","$","render","re","isAuth","test","location","pathname","undefined","mapStateToProps","state","authentication","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC7BK,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,aAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAIC,KAAK,GAAG,OAAOC,QAAQ,CAACC,MAA5B;AACA,UAAIC,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAY,OAAOL,IAAP,GAAc,GAA1B,CAAZ;AACA,UAAII,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAK,CAACG,GAAN,GAAYF,KAAZ,CAAkB,GAAlB,EAAuBG,KAAvB,EAAP;AACxB,KAPiB,CASlB;;;AACA,QAAIC,SAAS,GAAGV,SAAS,CAAC,KAAD,CAAzB,CAVkB,CAYlB;;AACA,QAAI,OAAOU,SAAP,KAAqB,WAAzB,EAAsC,OAbpB,CAelB;;AACAA,IAAAA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,SAAD,CAAf,CAAZ,CAhBkB,CAkBlB;;AACA,QAAI,CAACA,SAAS,CAACI,UAAf,EAA2B,OAnBT,CAqBlB;AACA;;AACA,SAAKC,KAAL,CAAWlB,gBAAX,GAA8BmB,IAA9B,CAAmC,MAAM;AACvC;AACA,UAAI,CAAC,KAAKD,KAAL,CAAWE,MAAX,CAAkBC,KAAvB,EAA8B;AAC5B;AACAR,QAAAA,SAAS,GAAG;AACVI,UAAAA,UAAU,EAAE,KADF;AAEVK,UAAAA,QAAQ,EAAE;AAFA,SAAZ;AAKAhB,QAAAA,QAAQ,CAACC,MAAT,GAAkB,SAASgB,IAAI,CAACT,IAAI,CAACU,SAAL,CAAeX,SAAf,CAAD,CAA/B,CAP4B,CAS5B;;AACA,YAAIY,aAAa,GACfC,CAAC,EADH,CAV4B,CAY1B;AACF;AACD;AACF,KAjBD;AAkBD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,QAAIC,EAAE,GAAG,iBAAT;AACA,QAAIC,MAAM,GAAGD,EAAE,CAACE,IAAH,CAAQ,KAAKZ,KAAL,CAAWa,QAAX,CAAoBC,QAA5B,CAAb;AAEA,wBACE;AAAA,gBACGH,MAAM,GAAGI,SAAH,gBACL,QAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKf,KAAL,CAAWE,MAAX,CAAkBH;AAAtC;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAxD4B;;AA2D/B,MAAMiB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLf,IAAAA,MAAM,EAAEe,KAAK,CAACC,cAAN,CAAqBhB;AADxB,GAAP;AAGD,CAJD;;AAMA,MAAMiB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLtC,IAAAA,gBAAgB,EAAE,MAAM;AACtB,aAAOsC,QAAQ,CAACtC,gBAAgB,EAAjB,CAAf;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAeD,OAAO,CAACmC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpC,MAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport TopBar from \"../TopBar\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\r\n\r\nclass Header extends Component {\r\n  componentDidMount() {\r\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\r\n    // get cookie by name\r\n    function getCookie(name) {\r\n      var value = \"; \" + document.cookie;\r\n      var parts = value.split(\"; \" + name + \"=\");\r\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n    }\r\n\r\n    // get loginData from cookie\r\n    let loginData = getCookie(\"key\");\r\n\r\n    // if loginData is undefined, do nothing\r\n    if (typeof loginData === \"undefined\") return;\r\n\r\n    // decode base64 & parse json\r\n    loginData = JSON.parse(atob(loginData));\r\n\r\n    // if not logged in, do nothing\r\n    if (!loginData.isLoggedIn) return;\r\n\r\n    // page refreshed & has a session in cookie,\r\n    // check whether this cookie is valid or not\r\n    this.props.getStatusRequest().then(() => {\r\n      // if session is not valid\r\n      if (!this.props.status.valid) {\r\n        // logout the session\r\n        loginData = {\r\n          isLoggedIn: false,\r\n          username: \"\",\r\n        };\r\n\r\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\r\n\r\n        // and notify\r\n        let $toastContent =\r\n          $();\r\n          //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\r\n        //Materialize.toast($toastContent, 4000);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /* Check whether current route is login or register using regex */\r\n    let re = /(SignIn|SignUp)/;\r\n    let isAuth = re.test(this.props.location.pathname);\r\n\r\n    return (\r\n      <div>\r\n        {isAuth ? undefined : (\r\n          <Header isLoggedIn={this.props.status.isLoggedIn} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    status: state.authentication.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getStatusRequest: () => {\r\n      return dispatch(getStatusRequest());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}