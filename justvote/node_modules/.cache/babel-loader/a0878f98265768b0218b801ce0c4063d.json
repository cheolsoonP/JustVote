{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Front\\\\justvote\\\\src\\\\components\\\\mainHome\\\\MainHome.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as RBS from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getMainRequest, pushLikeBtRequest, pushDislikeBtRequest, getLikeRequest } from \"../../redux\";\nimport Subbar from \"../Subbar\";\nimport MediaCard from \"../MediaCard\"; // material import\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\"\n    }\n  }\n}));\n\nfunction MainHome({\n  getMainRequest,\n  getLikeRequest,\n  pushLikeBtRequest,\n  pushDislikeBtRequest,\n  contentList,\n  checkGetMain,\n  userID,\n  loading,\n  likeBtState,\n  dislikeBtState,\n  getLike\n}) {\n  _s();\n\n  let voteHits = [];\n  let voteID = [];\n  let voteRegDate = [];\n  let voteTitle = [];\n  let isLikeContent = []; // 0이면 notLike, 1이면 Like\n\n  let makerID = [];\n  let count = 0;\n  useEffect(() => {\n    getMainRequest(category, userID);\n    getLikeRequest(category, userID);\n  }, []);\n  const {\n    category\n  } = useParams(); //데이터 받기\n\n  const contentItems = loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"is loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this) : contentList.map(content => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      visibility: \"hidden\"\n    },\n    children: (voteHits.push(content.voteHits), voteID.push(content.voteID), voteRegDate.push(content.voteRegDate), voteTitle.push(content.voteTitle), //isLikeContent.push(content.TF),\n    makerID.push(content.userID))\n  }, content.voteID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this)); // 데이터 받기\n\n  const getLikeItems = loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"is loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this) : getLike.map(content => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      visibility: \"hidden\"\n    },\n    children: isLikeContent.push(content.tf)\n  }, content.voteID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this)); // Like 버튼을 눌렀을 때\n\n  function handlePushLikeBt(body) {\n    pushLikeBtRequest(body).then(() => {\n      if (likeBtState === \"SUCCESS\") {\n        this.props.history.push(\"/Home/:category\");\n      }\n    });\n  } // Like 취소 버튼 눌렀을 때\n\n\n  function handlePushDislikeBt(body) {\n    pushDislikeBtRequest(body).then(() => {\n      if (dislikeBtState === \"SUCCESS\") {\n        this.props.history.push(\"/Home/:category\");\n      }\n    });\n  } //Contents에 관한 부분\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: useStyles.root,\n    children: [/*#__PURE__*/_jsxDEV(Subbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: contentList.map((content, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/content/${voteID[index]}`,\n          children: /*#__PURE__*/_jsxDEV(MediaCard, {\n            voteID: content.voteID,\n            voteHits: content.voteHits,\n            userID: userID,\n            voteRegDate: content.voteRegDate,\n            voteTitle: content.voteTitle,\n            count: count++,\n            isLikeContent: isLikeContent[index],\n            makerID: content.userID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainHome, \"0eZycDWdQuHd9TnQclmitNvWwdY=\", false, function () {\n  return [useParams];\n});\n\n_c = MainHome;\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    userID: state.authentication.status.currentUser,\n    contentList: state.contents.status.voteContents,\n    checkGetMain: state.contents.status.valid,\n    getLike: state.contents.getLikeStatus.isLikeContents,\n    likeBtState: state.contents.addLike.status,\n    dislikeBtState: state.contents.disLike.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMainRequest: (category, userID) => {\n      return dispatch(getMainRequest(category, userID));\n    },\n    getLikeRequest: (category, userID) => {\n      return dispatch(getLikeRequest(category, userID));\n    },\n    pushLikeBtRequest: body => {\n      return dispatch(pushLikeBtRequest(body));\n    },\n    pushDislikeBtRequest: body => {\n      return dispatch(pushDislikeBtRequest(body));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainHome);\n\nvar _c;\n\n$RefreshReg$(_c, \"MainHome\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/components/mainHome/MainHome.js"],"names":["React","useEffect","useState","RBS","useParams","connect","getMainRequest","pushLikeBtRequest","pushDislikeBtRequest","getLikeRequest","Subbar","MediaCard","makeStyles","TextField","Button","Grid","Link","useStyles","theme","root","margin","spacing","width","MainHome","contentList","checkGetMain","userID","loading","likeBtState","dislikeBtState","getLike","voteHits","voteID","voteRegDate","voteTitle","isLikeContent","makerID","count","category","contentItems","map","content","visibility","push","getLikeItems","tf","handlePushLikeBt","body","then","props","history","handlePushDislikeBt","index","mapStateToProps","state","console","log","authentication","status","currentUser","contents","voteContents","valid","getLikeStatus","isLikeContents","addLike","disLike","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport * as RBS from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getMainRequest,\r\n  pushLikeBtRequest,\r\n  pushDislikeBtRequest,\r\n  getLikeRequest,\r\n} from \"../../redux\";\r\nimport Subbar from \"../Subbar\";\r\nimport MediaCard from \"../MediaCard\";\r\n\r\n// material import\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction MainHome({\r\n  getMainRequest,\r\n  getLikeRequest,\r\n  pushLikeBtRequest,\r\n  pushDislikeBtRequest,\r\n  contentList,\r\n  checkGetMain,\r\n  userID,\r\n  loading,\r\n  likeBtState,\r\n  dislikeBtState,\r\n  getLike,\r\n}) {\r\n  let voteHits = [];\r\n  let voteID = [];\r\n  let voteRegDate = [];\r\n  let voteTitle = [];\r\n  let isLikeContent = []; // 0이면 notLike, 1이면 Like\r\n  let makerID = [];\r\n  let count = 0;\r\n\r\n  useEffect(() => {\r\n    getMainRequest(category, userID);\r\n    getLikeRequest(category, userID);\r\n  }, []);\r\n\r\n  const { category } = useParams();\r\n\r\n  //데이터 받기\r\n  const contentItems = loading ? (\r\n    <div>is loading...</div>\r\n  ) : (\r\n    contentList.map((content) => (\r\n      <div key={content.voteID} style={{ visibility: \"hidden\" }}>\r\n        {\r\n          (voteHits.push(content.voteHits),\r\n          voteID.push(content.voteID),\r\n          voteRegDate.push(content.voteRegDate),\r\n          voteTitle.push(content.voteTitle),\r\n          //isLikeContent.push(content.TF),\r\n          makerID.push(content.userID))\r\n        }\r\n      </div>\r\n    ))\r\n  );\r\n\r\n  // 데이터 받기\r\n  const getLikeItems = loading ? (\r\n    <div>is loading...</div>\r\n  ) : (\r\n    getLike.map((content) => (\r\n      <div key={content.voteID} style={{ visibility: \"hidden\" }}>\r\n        {isLikeContent.push(content.tf)}\r\n      </div>\r\n    ))\r\n  );\r\n\r\n  // Like 버튼을 눌렀을 때\r\n  function handlePushLikeBt(body) {\r\n    pushLikeBtRequest(body).then(() => {\r\n      if (likeBtState === \"SUCCESS\") {\r\n        this.props.history.push(\"/Home/:category\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // Like 취소 버튼 눌렀을 때\r\n  function handlePushDislikeBt(body) {\r\n    pushDislikeBtRequest(body).then(() => {\r\n      if (dislikeBtState === \"SUCCESS\") {\r\n        this.props.history.push(\"/Home/:category\");\r\n      }\r\n    });\r\n  }\r\n\r\n  //Contents에 관한 부분\r\n  return (\r\n    <div className={useStyles.root}>\r\n      <Subbar></Subbar>\r\n      <Grid container spacing={2}>\r\n        {contentList.map((content, index) => (\r\n          <Grid item xs={6} sm={3}>\r\n            <Link key={index} to={`/content/${voteID[index]}`}>\r\n              <MediaCard\r\n                voteID={content.voteID}\r\n                voteHits={content.voteHits}\r\n                userID={userID}\r\n                voteRegDate={content.voteRegDate}\r\n                voteTitle={content.voteTitle}\r\n                count={count++}\r\n                isLikeContent={isLikeContent[index]}\r\n                makerID={content.userID}\r\n              ></MediaCard>\r\n            </Link>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  return {\r\n    userID: state.authentication.status.currentUser,\r\n    contentList: state.contents.status.voteContents,\r\n    checkGetMain: state.contents.status.valid,\r\n    getLike: state.contents.getLikeStatus.isLikeContents,\r\n    likeBtState: state.contents.addLike.status,\r\n    dislikeBtState: state.contents.disLike.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMainRequest: (category, userID) => {\r\n      return dispatch(getMainRequest(category, userID));\r\n    },\r\n    getLikeRequest: (category, userID) => {\r\n      return dispatch(getLikeRequest(category, userID));\r\n    },\r\n    pushLikeBtRequest: (body) => {\r\n      return dispatch(pushLikeBtRequest(body));\r\n    },\r\n    pushDislikeBtRequest: (body) => {\r\n      return dispatch(pushDislikeBtRequest(body));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainHome);\r\n"]},"metadata":{},"sourceType":"module"}