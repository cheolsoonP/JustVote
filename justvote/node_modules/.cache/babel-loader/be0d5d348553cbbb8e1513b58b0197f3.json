{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Front\\\\justvote\\\\src\\\\components\\\\header\\\\Header.js\";\n// Header는 Topbar를\nimport React, { Component } from \"react\";\nimport TopBar from \"./TopBar\";\nimport { connect } from \"react-redux\";\nimport { getStatusRequest, logoutRequest } from \"../../redux/authentication/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLogout = () => {\n      this.props.logoutRequest().then(() => {\n        //Materialize.toast(\"Good Bye!\", 2000);\n        // EMPTIES THE SESSION\n        let loginData = {\n          isLoggedIn: false,\n          username: \"\"\n        };\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\n      });\n    };\n  }\n\n  componentDidMount() {\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\n    // get cookie by name\n    console.log(\"header-cookie : \" + document.cookie);\n\n    function getCookie(name) {\n      var value = \"; \" + document.cookie;\n      var parts = value.split(\"; \" + name + \"=\");\n      console.log(parts);\n      return parts.pop().split(\";\").shift();\n    } // get loginData from cookie\n\n\n    let loginData = getCookie(\"key\");\n    console.log(loginData); // if loginData is undefined, do nothing\n\n    if (typeof loginData === \"undefined\") return; // decode base64 & parse json\n\n    loginData = JSON.parse(atob(loginData)); // if not logged in, do nothing\n\n    if (!loginData.isLoggedIn) return; // page refreshed & has a session in cookie,\n    // check whether this cookie is valid or not\n\n    this.props.getStatusRequest().then(() => {\n      // if session is not valid\n      if (!this.props.status.valid) {\n        // logout the session\n        loginData = {\n          isLoggedIn: false,\n          userId: \"\"\n        };\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData)); // and notify\n        //let $toastContent = $();\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\n        //Materialize.toast($toastContent, 4000);\n      }\n    });\n  }\n\n  render() {\n    /* Check whether current route is login or register using regex */\n    let thisPath = this.props.location.pathname; // 현재 경로가 '/'라면 Home으로 이동\n\n    if (thisPath === \"/\") {\n      this.props.history.push(\"/Home\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TopBar, {\n          isLoggedIn: this.props.status.isLoggedIn,\n          onLogout: this.handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"state.authentication.status.isLoggedIn\" + state.authentication.status.isLoggedIn);\n  return {\n    status: state.authentication.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      return dispatch(getStatusRequest());\n    },\n    logoutRequest: () => {\n      return dispatch(logoutRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/components/header/Header.js"],"names":["React","Component","TopBar","connect","getStatusRequest","logoutRequest","Header","handleLogout","props","then","loginData","isLoggedIn","username","document","cookie","btoa","JSON","stringify","componentDidMount","console","log","getCookie","name","value","parts","split","pop","shift","parse","atob","status","valid","userId","render","thisPath","location","pathname","history","push","mapStateToProps","state","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// Header는 Topbar를\r\nimport React, { Component } from \"react\";\r\nimport TopBar from \"./TopBar\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getStatusRequest,\r\n  logoutRequest,\r\n} from \"../../redux/authentication/actions\";\r\n\r\nclass Header extends Component {\r\n  componentDidMount() {\r\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\r\n    // get cookie by name\r\n    console.log(\"header-cookie : \" + document.cookie);\r\n    function getCookie(name) {\r\n      var value = \"; \" + document.cookie;\r\n      var parts = value.split(\"; \" + name + \"=\");\r\n      console.log(parts);\r\n\r\n      return parts.pop().split(\";\").shift();\r\n    }\r\n\r\n    // get loginData from cookie\r\n    let loginData = getCookie(\"key\");\r\n    console.log(loginData);\r\n\r\n    // if loginData is undefined, do nothing\r\n    if (typeof loginData === \"undefined\") return;\r\n\r\n    // decode base64 & parse json\r\n    loginData = JSON.parse(atob(loginData));\r\n\r\n    // if not logged in, do nothing\r\n    if (!loginData.isLoggedIn) return;\r\n\r\n    // page refreshed & has a session in cookie,\r\n    // check whether this cookie is valid or not\r\n    this.props.getStatusRequest().then(() => {\r\n      // if session is not valid\r\n      if (!this.props.status.valid) {\r\n        // logout the session\r\n        loginData = {\r\n          isLoggedIn: false,\r\n          userId: \"\",\r\n        };\r\n\r\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\r\n\r\n        // and notify\r\n        //let $toastContent = $();\r\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\r\n        //Materialize.toast($toastContent, 4000);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleLogout = () => {\r\n    this.props.logoutRequest().then(() => {\r\n      //Materialize.toast(\"Good Bye!\", 2000);\r\n\r\n      // EMPTIES THE SESSION\r\n      let loginData = {\r\n        isLoggedIn: false,\r\n        username: \"\",\r\n      };\r\n\r\n      document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    /* Check whether current route is login or register using regex */\r\n\r\n    let thisPath = this.props.location.pathname;\r\n\r\n    // 현재 경로가 '/'라면 Home으로 이동\r\n    if (thisPath === \"/\") {\r\n      this.props.history.push(\"/Home\");\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <TopBar\r\n            isLoggedIn={this.props.status.isLoggedIn}\r\n            onLogout={this.handleLogout}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(\r\n    \"state.authentication.status.isLoggedIn\" +\r\n      state.authentication.status.isLoggedIn\r\n  );\r\n  return {\r\n    status: state.authentication.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getStatusRequest: () => {\r\n      return dispatch(getStatusRequest());\r\n    },\r\n    logoutRequest: () => {\r\n      return dispatch(logoutRequest());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}