{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Front\\\\justvote\\\\src\\\\components\\\\header\\\\Header.js\";\n// Header는 Topbar를\nimport React, { Component } from \"react\";\nimport TopBar from \"../TopBar\";\nimport { connect } from \"react-redux\";\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  componentDidMount() {\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\n    // get cookie by name\n    console.log(\"header-cookie : \" + document.cookie);\n\n    function getCookie(name) {\n      var value = \"; \" + document.cookie;\n      var parts = value.split(\"; \" + name + \"=\");\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\n    }\n\n    let re = /(login|register)/;\n    console.log(\"home location : \" + this.props.location.pathname);\n    let isAuth = re.test(this.props.location.pathname); // get loginData from cookie\n\n    let loginData = getCookie(\"key\"); // if loginData is undefined, do nothing\n\n    if (typeof loginData === \"undefined\") return; // decode base64 & parse json\n\n    loginData = JSON.parse(atob(loginData)); // if not logged in, do nothing\n\n    if (!loginData.isLoggedIn) return; // page refreshed & has a session in cookie,\n    // check whether this cookie is valid or not\n\n    this.props.getStatusRequest().then(() => {\n      // if session is not valid\n      if (!this.props.status.valid) {\n        // logout the session\n        loginData = {\n          isLoggedIn: false,\n          userId: \"\"\n        };\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData)); // and notify\n        //let $toastContent = $();\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\n        //Materialize.toast($toastContent, 4000);\n      }\n    });\n  }\n\n  render() {\n    /* Check whether current route is login or register using regex */\n    let re = /(SignIn|SignUp)/;\n    console.log(this.props);\n    let isAuth = re.test(this.set);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TopBar, {\n        isLoggedIn: this.props.status.isLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"state.authentication.status.isLoggedIn\" + state.authentication.status.isLoggedIn);\n  return {\n    status: state.authentication.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      return dispatch(getStatusRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Front/justvote/src/components/header/Header.js"],"names":["React","Component","TopBar","connect","getStatusRequest","Header","componentDidMount","console","log","document","cookie","getCookie","name","value","parts","split","length","pop","shift","re","props","location","pathname","isAuth","test","loginData","JSON","parse","atob","isLoggedIn","then","status","valid","userId","btoa","stringify","render","set","mapStateToProps","state","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// Header는 Topbar를\r\nimport React, { Component } from \"react\";\r\nimport TopBar from \"../TopBar\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatusRequest } from \"../../redux/authentication/actions\";\r\n\r\nclass Header extends Component {\r\n  componentDidMount() {\r\n    //컴포넌트 렌더링이 맨 처음 완료된 이후에 바로 세션확인\r\n    // get cookie by name\r\n    console.log(\"header-cookie : \" + document.cookie);\r\n    function getCookie(name) {\r\n      var value = \"; \" + document.cookie;\r\n      var parts = value.split(\"; \" + name + \"=\");\r\n      if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n    }\r\n\r\n    let re = /(login|register)/;\r\n    console.log(\"home location : \" + this.props.location.pathname);\r\n    let isAuth = re.test(this.props.location.pathname);\r\n\r\n    // get loginData from cookie\r\n    let loginData = getCookie(\"key\");\r\n\r\n    // if loginData is undefined, do nothing\r\n    if (typeof loginData === \"undefined\") return;\r\n\r\n    // decode base64 & parse json\r\n    loginData = JSON.parse(atob(loginData));\r\n\r\n    // if not logged in, do nothing\r\n    if (!loginData.isLoggedIn) return;\r\n\r\n    // page refreshed & has a session in cookie,\r\n    // check whether this cookie is valid or not\r\n    this.props.getStatusRequest().then(() => {\r\n      // if session is not valid\r\n      if (!this.props.status.valid) {\r\n        // logout the session\r\n        loginData = {\r\n          isLoggedIn: false,\r\n          userId: \"\",\r\n        };\r\n\r\n        document.cookie = \"key=\" + btoa(JSON.stringify(loginData));\r\n\r\n        // and notify\r\n        //let $toastContent = $();\r\n        //'<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>'\r\n        //Materialize.toast($toastContent, 4000);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /* Check whether current route is login or register using regex */\r\n    let re = /(SignIn|SignUp)/;\r\n    console.log(this.props);\r\n    let isAuth = re.test(this.set);\r\n\r\n    return (\r\n      <div>\r\n        <TopBar isLoggedIn={this.props.status.isLoggedIn} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(\r\n    \"state.authentication.status.isLoggedIn\" +\r\n      state.authentication.status.isLoggedIn\r\n  );\r\n  return {\r\n    status: state.authentication.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getStatusRequest: () => {\r\n      return dispatch(getStatusRequest());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}